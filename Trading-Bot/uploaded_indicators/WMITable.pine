//@version=5
// Author: mike.italy, Updated by jamcaster
indicator("Wave Momentum Index with MTF Table", shorttitle="WMI with Table", overlay=false, max_bars_back=500)

// Input parameters
a = input.int(20, "Percent K Length")
b = input.int(3, "Percent D Length")
ob = input.int(40, "OverBought")
os = input.int(-40, "OverSold")

// Timeframe selection inputs
show_1m = input.bool(true, "Show 1m")
show_3m = input.bool(true, "Show 3m")
show_5m = input.bool(true, "Show 5m")
show_15m = input.bool(true, "Show 15m")
show_30m = input.bool(true, "Show 30m")
show_1h = input.bool(true, "Show 1h")
show_2h = input.bool(true, "Show 2h")
show_4h = input.bool(true, "Show 4h")
show_8h = input.bool(true, "Show 8h")
show_12h = input.bool(true, "Show 12h")
show_1d = input.bool(true, "Show 1D")
show_table = input.bool(true, "Show Table")  // Checkbox to toggle the table display
show_markers = input.bool(true, "Show Markers")  // Checkbox to toggle markers on MACD and Signal Line intersection

// Function to calculate Wave Momentum Index for a specific timeframe
f_wmi(tf) =>
    ll = ta.lowest(low, a)
    hh = ta.highest(high, a)
    diff = hh - ll
    rdiff = close - (hh + ll) / 2
    avgrel = ta.ema(ta.ema(rdiff, b), b)
    avgdiff = ta.ema(ta.ema(diff, b), b)
    smi_signal = avgdiff != 0 ? (avgrel / (avgdiff / 2) * 100) : 0
    ta.ema(smi_signal, b)

// Function to determine overbought/oversold WMI Status with direction
wmi_status(tf) =>
    smi_signal = request.security(syminfo.tickerid, tf, f_wmi(tf))
    prev_smi_signal = request.security(syminfo.tickerid, tf, f_wmi(tf)[1])  // Get previous WMI value
    direction = smi_signal > prev_smi_signal ? "Bullish" : "Bearish"  // Determine direction
    if smi_signal > ob
        "OB"
    else if smi_signal < os
        "OS"
    else if smi_signal < 0
        "Bottom_" + direction
    else
        "Top_" + direction

// Get WMI Status for individual timeframes
status_1m = wmi_status("1")
status_3m = wmi_status("3")
status_5m = wmi_status("5")
status_15m = wmi_status("15")
status_30m = wmi_status("30")
status_1h = wmi_status("60")
status_2h = wmi_status("120")
status_4h = wmi_status("240")
status_8h = wmi_status("480")
status_12h = wmi_status("720")
status_1d = wmi_status("D")

// Declare table variable
var table tf_table = na

// Get current chart timeframe
current_tf = timeframe.period

// Function to populate the table with data
set_row(tf, status_value, row, is_current_tf) =>
    bgcolor = is_current_tf ? color.new(color.blue, 80) : color.gray  // Highlight the current timeframe in blue
    table.cell(tf_table, 0, row, tf, text_color=color.white, bgcolor=bgcolor)  // White text on selected background for the TF column
    color_cell = status_value == "OB" ? color.green : status_value == "OS" ? color.red : (str.contains(status_value, "Bearish") ? color.new(#FF9999, 0) : color.new(#99FF99, 0))
    table.cell(tf_table, 1, row, status_value, bgcolor=color_cell, text_color=color.new(#333333, 0))  // Dark gray text for WMI status

// Table setup, conditional on 'show_table'
if (show_table)
    if na(tf_table)
        tf_table := table.new(position.top_right, 2, 12, frame_color=color.black, frame_width=1)
        // Set headers
        if (bar_index == 0)
            table.cell(tf_table, 0, 0, "TF", text_color=color.white, bgcolor=color.black)
            table.cell(tf_table, 1, 0, "WMI Status", text_color=color.white, bgcolor=color.black)

    // Fill rows for each selected timeframe, highlight current timeframe
    if show_1m
        set_row("1m", status_1m, 1, current_tf == "1")
    if show_3m
        set_row("3m", status_3m, 2, current_tf == "3")
    if show_5m
        set_row("5m", status_5m, 3, current_tf == "5")
    if show_15m
        set_row("15m", status_15m, 4, current_tf == "15")
    if show_30m
        set_row("30m", status_30m, 5, current_tf == "30")
    if show_1h
        set_row("1h", status_1h, 6, current_tf == "60")
    if show_2h
        set_row("2h", status_2h, 7, current_tf == "120")
    if show_4h
        set_row("4h", status_4h, 8, current_tf == "240")
    if show_8h
        set_row("8h", status_8h, 9, current_tf == "480")
    if show_12h
        set_row("12h", status_12h, 10, current_tf == "720")
    if show_1d
        set_row("1D", status_1d, 11, current_tf == "D")

// Plot WMI and its signals
smi_signal = f_wmi("D")
smi_signal_ema = ta.ema(smi_signal, 10)
plot(smi_signal, title="WMI Signal", color=color.blue)
plot(smi_signal_ema, title="EMA Signal", color=color.yellow)

// Add Midline (Zero Line)
hline(0, "Midline", color=color.gray, linestyle=hline.style_dotted)

// Overbought and Oversold levels for current timeframe
ob_level = hline(ob, "Overbought", color=color.green)
os_level = hline(os, "Oversold", color=color.red)

// Plot lines at 40 and -40 levels
plot_40 = plot(ob, "Level 40", display=display.none)
plot_m40 = plot(os, "Level -40", display=display.none)

// Conditional plots for shading regions above 40 and below -40
smi_above_40 = smi_signal > ob ? smi_signal : na
smi_below_m40 = smi_signal < os ? smi_signal : na

// Plot the WMI signal only when it crosses above 40 or below -40
plot_above_40 = plot(smi_above_40, color=color.green, display=display.none)
plot_below_m40 = plot(smi_below_m40, color=color.red, display=display.none)

// Apply shading only for the region inside 40 and -40
fill(plot_40, plot_above_40, color=color.new(color.green, 80), title="OverBought Shading")
fill(plot_m40, plot_below_m40, color=color.new(color.red, 80), title="OverSold Shading")

// Add markers at MACD (WMI) and signal intersections, controlled by 'show_markers' option
buyCondition = ta.crossover(smi_signal, smi_signal_ema) and show_markers and smi_signal < os
sellCondition = ta.crossunder(smi_signal, smi_signal_ema) and show_markers and smi_signal > ob

// Exit Conditions
exitCondition = smi_signal_ema == 0

// Show small transparent orange circle markers based on conditions
plotshape(series=buyCondition ? smi_signal : na, title="Buy Signal", location=location.absolute, color=color.new(color.orange, 70), style=shape.circle, size=size.small, text="BUY")
plotshape(series=sellCondition ? smi_signal : na, title="Sell Signal", location=location.absolute, color=color.new(color.orange, 70), style=shape.circle, size=size.small, text="SELL")
plotshape(series=exitCondition ? smi_signal : na, title="Exit Signal", location=location.absolute, color=color.new(color.orange, 70), style=shape.circle, size=size.small)

// Count how many timeframes are in OB or OS state
count_ob = (status_1m == "OB" ? 1 : 0) + (status_3m == "OB" ? 1 : 0) + (status_5m == "OB" ? 1 : 0) +
           (status_15m == "OB" ? 1 : 0) 

count_os = (status_1m == "OS" ? 1 : 0) + (status_3m == "OS" ? 1 : 0) + (status_5m == "OS" ? 1 : 0) +
           (status_15m == "OS" ? 1 : 0) 

// Alert condition when 3 or more timeframes are overbought
alertcondition(count_ob >= 3, title="Overbought Alert (3 TFs)", message="3+ Timeframes Overbought!")

// Alert condition when 3 or more timeframes are oversold
alertcondition(count_os >= 3, title="Oversold Alert (3 TFs)", message="3+ Timeframes Oversold!")

// Alert condition when 4 or more timeframes are overbought
alertcondition(count_ob >= 4, title="Overbought Alert (4 TFs)", message="4+ Timeframes Overbought! Strong Signal!")

// Alert condition when 4 or more timeframes are oversold
alertcondition(count_os >= 4, title="Oversold Alert (4 TFs)", message="4+ Timeframes Oversold! Strong Signal!")

